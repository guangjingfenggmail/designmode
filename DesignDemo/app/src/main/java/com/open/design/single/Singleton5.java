package com.open.design.single;

/**
 * ****************************************************************************************************************************************************************************
 *
 * @author :guangjing.feng
 * @createTime: 2018/9/3.
 * @version:1.1.0
 * @modifyTime:
 * @modifyAuthor:
 * @description: *****************************************************************************************************************************************************************************
 **/
public enum Singleton5 {
    //定义一个枚举的元素，它就是Singleton的一个实例
    instance;

    public void doSomething(){
        // do something ...
    }


    @Override
    public String toString() {
        return "枚举类型单例模式\n" +
                "\n" +
                "public enum Singleton{\n" +
                "    //定义一个枚举的元素，它就是Singleton的一个实例\n" +
                "    instance;\n" +
                " \n" +
                "    public void doSomething(){\n" +
                "        // do something ...\n" +
                "    }    \n" +
                "}\n" +
                "使用方法如下：\n" +
                "\n" +
                "public static void main(String[] args){\n" +
                "   Singleton singleton = Singleton.instance;\n" +
                "   singleton.doSomething();\n" +
                "}\n" +
                "默认枚举实例的创建是线程安全的.(创建枚举类的单例在JVM层面也是能保证线程安全的), 所以不需要担心线程安全的问题，所以理论上枚举类来实现单例模式是最简单的方式。\n" +
                "\n" +
                "总结\n" +
                "\n" +
                "一般单例模式包含了5种写法，分别是饿汉、懒汉、双重校验锁、静态内部类和枚举。相信看完之后你对单例模式有了充分的理解了，根据不同的场景选择最你最喜欢的一种单例模式吧！" +
                "单例模式是使用频率较高的设计模式，但是由于客户端通常没有高并发的情款，选择哪种实现方式并不会有太大影响。但是出于效率考虑，推荐使用“DCL”和“静态内部类”实现方式。\n" +
                "\n" +
                "单例模式的优点：\n" +
                "\n" +
                "1.在内存中只有一个实例，减少内存开支\n" +
                "\n" +
                "2.只生产一个实例，减少系统性能的性能开销\n" +
                "\n" +
                "3.避免对资源的多重占用。\n" +
                "\n" +
                "4.可以在系统设置全局的访问点，优化和共享资源访问。（例如可以设置一个单例类，负责所有数据表的映射处理）\n" +
                "\n" +
                "单例的缺点;\n" +
                "\n" +
                "1.单例一般没有接口，扩展很困难。\n" +
                "\n" +
                "2.单例如果持有Context对象，很容易引起内存泄漏，最好传递全局的Application Context。";
    }
}
